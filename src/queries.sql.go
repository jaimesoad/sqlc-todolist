// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package src

import (
	"context"
	"database/sql"
)

const changeName = `-- name: ChangeName :execresult
UPDATE Todo
SET content = ?
WHERE id = ?
`

type ChangeNameParams struct {
	Content string `json:"content"`
	ID      int64  `json:"id"`
}

func (q *Queries) ChangeName(ctx context.Context, arg ChangeNameParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, changeName, arg.Content, arg.ID)
}

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO Todo (
    content
) VALUES (?)
`

func (q *Queries) CreateTodo(ctx context.Context, content string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo, content)
}

const deleteTodo = `-- name: DeleteTodo :execresult
DELETE FROM Todo
WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTodo, id)
}

const lastTenTodos = `-- name: LastTenTodos :many
SELECT id, content, done FROM (SELECT id, content, done FROM Todo
ORDER BY id DESC LIMIT 10) as var1
ORDER BY id
`

func (q *Queries) LastTenTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, lastTenTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Content, &i.Done); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const todoById = `-- name: TodoById :one
SELECT id, content, done FROM Todo
WHERE id = ? LIMIT 1
`

func (q *Queries) TodoById(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, todoById, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Content, &i.Done)
	return i, err
}

const toggleTodo = `-- name: ToggleTodo :execresult
UPDATE Todo
SET done = NOT done
WHERE id = ?
`

func (q *Queries) ToggleTodo(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, toggleTodo, id)
}
